import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as c,c as h,d as n,b as a,a as e,e as l,f as t}from"./app-4864bddc.js";const s={},o=t('<h1 id="接口协议" tabindex="-1"><a class="header-anchor" href="#接口协议" aria-hidden="true">#</a> 接口协议</h1><h2 id="amba-advanced-microcontroller-bus-architecture" tabindex="-1"><a class="header-anchor" href="#amba-advanced-microcontroller-bus-architecture" aria-hidden="true">#</a> AMBA（Advanced Microcontroller Bus Architecture ）</h2><h3 id="ahb-advanced-high-performance-bus" tabindex="-1"><a class="header-anchor" href="#ahb-advanced-high-performance-bus" aria-hidden="true">#</a> AHB（Advanced High-Performance Bus）</h3><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性：</h4><ol><li>高速总线，高性能</li><li>2级流水操作</li><li>可支持多个总线主设备(16个master，一般不会太多)</li><li>支持burst传输（速度快、效率高的传输手段）</li><li>总线带宽可以是：8、16、32、64、128bits</li><li>上升沿触发操作</li><li>对于一个新设计，建议使用AHB。</li></ol><h4 id="ahb组成部分" tabindex="-1"><a class="header-anchor" href="#ahb组成部分" aria-hidden="true">#</a> AHB组成部分</h4><ol><li><p>AHB主设备（master）</p><p>初始化（发起）一次读操作或者写操作</p><p><mark>某一时刻只允许一个主设备使用总线</mark></p><p>一般，主设备是：CPU、DMA、DSP、LCDC（LCD Controller）等</p></li><li><p>AHB从设备（slave）</p><p>响应一次读操作或者写操作</p><p>通过地址来选择使用哪一个从设备</p><p>外部存储器控制器EMI、APB Bridge</p></li><li><p>AHB仲裁器（arbiter）</p><p>仲裁器能允许某一个主设备控制总线，防止上升沿到来时，多个设备同时发起使用总线请求出现冲突。</p><p>AMBA协议中没有定义仲裁算法，可以用各种仲裁算法。比如排序仲裁算法（轮询仲裁），将刚使用过总线的设备的优先级调至最低；比如优先仲裁方法，让某个设备的优先级一直处于最高，然后让其他设备使用其他仲裁算法。</p></li><li><p>AHB译码器（decoder）</p><p>当主设备传来地址信息时，需要通过地址译码器来确定主设备选择的是哪一个从设备。每个从设备都有一个或者一段地址（地址空间），称为AHB地址映射（MAP）。地址映射要由AHB译码器提前设定。</p><p>当译码器确定主设备选择的从设备后，把这个从设备的HSEL信号拉高。</p></li></ol><h3 id="apb-advanced-peripheral-bus" tabindex="-1"><a class="header-anchor" href="#apb-advanced-peripheral-bus" aria-hidden="true">#</a> APB（Advanced Peripheral Bus）</h3><ol><li>低速总线，低功耗</li><li>接口简单</li><li>在Bridge中所存地址信号和控制信号</li><li>适用于多种外设</li><li>上升沿触发</li></ol><h4 id="apb的组成部分" tabindex="-1"><a class="header-anchor" href="#apb的组成部分" aria-hidden="true">#</a> APB的组成部分</h4><ol><li><p>AHB2APB bridge</p><p>用来所存所有的地址、数据和控制信号</p><p>进行二级译码来产生APB从设备选择信号</p></li><li><p>APB从设备</p><p>除了AHB2APB Bridge，APB上所有其他模块都是从设备</p></li></ol><h3 id="amba协议的其他相关问题" tabindex="-1"><a class="header-anchor" href="#amba协议的其他相关问题" aria-hidden="true">#</a> AMBA协议的其他相关问题</h3><p>AMBA协议与工艺无关</p><p>没有定义电气特性</p><p>仅在时钟周期级定义时序</p><h3 id="asb-advanced-system-bus" tabindex="-1"><a class="header-anchor" href="#asb-advanced-system-bus" aria-hidden="true">#</a> ASB（Advanced System Bus）</h3><h3 id="axi-advanced-extensible-interface" tabindex="-1"><a class="header-anchor" href="#axi-advanced-extensible-interface" aria-hidden="true">#</a> AXI（Advanced eXtensible Interface）</h3><h2 id="iic-i2c" tabindex="-1"><a class="header-anchor" href="#iic-i2c" aria-hidden="true">#</a> IIC(I2C)</h2><h2 id="can" tabindex="-1"><a class="header-anchor" href="#can" aria-hidden="true">#</a> CAN</h2><h2 id="vga" tabindex="-1"><a class="header-anchor" href="#vga" aria-hidden="true">#</a> VGA</h2><h2 id="pcie" tabindex="-1"><a class="header-anchor" href="#pcie" aria-hidden="true">#</a> PCIe</h2><p><strong>这个栏目立项比较早，还没来得及继续更新。</strong></p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',23),p={href:"https://www.bilibili.com/video/BV1Jt4y1n7B5/?share_source=copy_web&vd_source=0c5dcfa65d9ec7c6bc2287ecf5b003a0",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"[2]",-1);function u(A,B){const r=d("ExternalLinkIcon");return c(),h("div",null,[n(" more "),a("尽管这只是一个杂项，但我仍然认为它非常重要，重要程度与数字验证、后端验证这些一样高。数字电路验证时需要与DUT直接打交道的。如果不能对系统级的DUT进行验证，那么验证是不完全的。数字电路被封装成系统后，往往都需要以某种通信协议去验证。所以，这里列出了一些常见的接口，以及它们的接口协议。注意，一定要区分接口界面和接口协议，这是不同的两个概念。 "),o,e("blockquote",null,[e("p",null,[a("[1] 【AMBA总线介绍1】 "),e("a",p,[a("https://www.bilibili.com/video/BV1Jt4y1n7B5/?share_source=copy_web&vd_source=0c5dcfa65d9ec7c6bc2287ecf5b003a0"),l(r)])]),b])])}const _=i(s,[["render",u],["__file","接口协议.html.vue"]]);export{_ as default};
