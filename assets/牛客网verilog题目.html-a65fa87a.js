import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p,b as t,f as e}from"./app-4864bddc.js";const o="/backend-note/misc/牛客网1-2.png",c="/backend-note/misc/牛客网1-3.png",l="/backend-note/misc/牛客网1-4.png",u="/backend-note/misc/牛客网1-5.png",i="/backend-note/misc/牛客网1-6.png",k="/backend-note/misc/牛客网1-7.png",r="/backend-note/misc/牛客网1-9-1.png",d="/backend-note/misc/牛客网1-9-2.png",m="/backend-note/misc/牛客网1-10.png",b="/backend-note/misc/牛客网2-1.png",v={},g=e(`<h1 id="牛客网verilog题目" tabindex="-1"><a class="header-anchor" href="#牛客网verilog题目" aria-hidden="true">#</a> 牛客网Verilog题目</h1><h2 id="_1-基础语法" tabindex="-1"><a class="header-anchor" href="#_1-基础语法" aria-hidden="true">#</a> 1. 基础语法</h2><h3 id="_1-1-四选一多路器" tabindex="-1"><a class="header-anchor" href="#_1-1-四选一多路器" aria-hidden="true">#</a> 1.1 四选一多路器</h3><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h4><p>制作一个四选一的多路选择器，要求输出定义上为线网类型</p><p>状态转换：</p><p>d0 11<br> d1 10<br> d2 01<br> d3 00</p><h4 id="我的解答" tabindex="-1"><a class="header-anchor" href="#我的解答" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">mux4_1</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d0<span class="token punctuation">,</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>sel<span class="token punctuation">,</span>
<span class="token keyword">output</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>mux_out
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//*************code***********//</span>
  <span class="token keyword">assign</span> mux_out <span class="token operator">=</span> <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2&#39;b00</span><span class="token punctuation">)</span><span class="token operator">?</span> d3 <span class="token punctuation">:</span> 
    <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2&#39;b01</span><span class="token punctuation">)</span><span class="token operator">?</span> d2 <span class="token punctuation">:</span>
    <span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2&#39;b10</span><span class="token punctuation">)</span><span class="token operator">?</span> d1 <span class="token punctuation">:</span> d0<span class="token punctuation">;</span>
<span class="token comment">//*************code***********//</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-异步复位的串联t触发器" tabindex="-1"><a class="header-anchor" href="#_1-2-异步复位的串联t触发器" aria-hidden="true">#</a> 1.2 异步复位的串联T触发器</h3><h4 id="描述-1" tabindex="-1"><a class="header-anchor" href="#描述-1" aria-hidden="true">#</a> 描述</h4><p>用verilog实现两个串联的异步复位的T触发器的逻辑，结构如图：</p><figure><img src="`+o+`" alt="异步复位" tabindex="0" loading="lazy"><figcaption>异步复位</figcaption></figure><h4 id="我的解答-1" tabindex="-1"><a class="header-anchor" href="#我的解答-1" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> Tff_2 <span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token keyword">wire</span> data<span class="token punctuation">,</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span>
<span class="token keyword">output</span> <span class="token keyword">reg</span> q  
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//*************code***********//</span>
<span class="token keyword">reg</span> t_q<span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rst<span class="token punctuation">)</span>
    <span class="token keyword">begin</span>
        q <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        t_q <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span>
    <span class="token keyword">begin</span>
        t_q <span class="token operator">&lt;=</span> data<span class="token punctuation">;</span>
        q <span class="token operator">&lt;=</span> t_q<span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">//*************code***********//</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-奇偶校验" tabindex="-1"><a class="header-anchor" href="#_1-3-奇偶校验" aria-hidden="true">#</a> 1.3 奇偶校验</h3><h4 id="描述-2" tabindex="-1"><a class="header-anchor" href="#描述-2" aria-hidden="true">#</a> 描述</h4><p>现在需要对输入的32位数据进行奇偶校验,根据sel输出校验结果（1输出奇校验，0输出偶校验）</p><figure><img src="`+c+`" alt="奇偶校验" tabindex="0" loading="lazy"><figcaption>奇偶校验</figcaption></figure><h4 id="我的解答-2" tabindex="-1"><a class="header-anchor" href="#我的解答-2" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">odd_sel</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> bus<span class="token punctuation">,</span>
<span class="token keyword">input</span> sel<span class="token punctuation">,</span>
<span class="token keyword">output</span> check
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//*************code***********//</span>

<span class="token keyword">assign</span> check <span class="token operator">=</span> sel<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">^</span>bus<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">^</span>bus<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//*************code***********//</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-移位运算与乘法" tabindex="-1"><a class="header-anchor" href="#_1-4-移位运算与乘法" aria-hidden="true">#</a> 1.4 移位运算与乘法</h3><h4 id="描述-3" tabindex="-1"><a class="header-anchor" href="#描述-3" aria-hidden="true">#</a> 描述</h4><p>已知d为一个8位数，请在每个时钟周期分别输出该数乘1/3/7/8,并输出一个信号通知此时刻输入的d有效（d给出的信号的上升沿表示写入有效）</p><figure><img src="`+l+`" alt="移位运算与乘法" tabindex="0" loading="lazy"><figcaption>移位运算与乘法</figcaption></figure><h4 id="我的解答-3" tabindex="-1"><a class="header-anchor" href="#我的解答-3" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">multi_sel</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d <span class="token punctuation">,</span>
<span class="token keyword">input</span> clk<span class="token punctuation">,</span>
<span class="token keyword">input</span> rst<span class="token punctuation">,</span>
<span class="token keyword">output</span> <span class="token keyword">reg</span> input_grant<span class="token punctuation">,</span>
<span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>out
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//*************code***********//</span>
<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>
<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cnt<span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        input_grant <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        temp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        cnt <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span>
        input_grant <span class="token operator">&lt;=</span> <span class="token number">1&#39;b1</span><span class="token punctuation">;</span>
        temp <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span>
        cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1&#39;b1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        input_grant <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1&#39;b1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1&#39;b1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>temp<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1&#39;b1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>


<span class="token comment">//*************code***********//</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-位拆分运算" tabindex="-1"><a class="header-anchor" href="#_1-5-位拆分运算" aria-hidden="true">#</a> 1.5 位拆分运算</h3><h4 id="描述-4" tabindex="-1"><a class="header-anchor" href="#描述-4" aria-hidden="true">#</a> 描述</h4><p>现在输入了一个压缩的16位数据，其实际上包含了四个数据[3:0] [7:4] [11:8] [15:12],</p><p>现在请按照sel选择输出四个数据的相加结果,并输出valid_out信号（在不输出时候拉低）</p><p>0: 不输出且只有此时的输入有效</p><p>1：输出[3:0]+[7:4]</p><p>2：输出[3:0]+[11:8]</p><p>3：输出[3:0]+[15:12]</p><figure><img src="`+u+`" alt="位拆分运算" tabindex="0" loading="lazy"><figcaption>位拆分运算</figcaption></figure><h4 id="我的解答-4" tabindex="-1"><a class="header-anchor" href="#我的解答-4" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns

<span class="token keyword">module</span> <span class="token function">data_cal</span><span class="token punctuation">(</span>
<span class="token keyword">input</span> clk<span class="token punctuation">,</span>
<span class="token keyword">input</span> rst<span class="token punctuation">,</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d<span class="token punctuation">,</span>
<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>sel<span class="token punctuation">,</span>

<span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>out<span class="token punctuation">,</span>
<span class="token keyword">output</span> validout
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//*************code***********//</span>

<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_reg<span class="token punctuation">;</span>
<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>

<span class="token keyword">assign</span> out <span class="token operator">=</span> out_reg<span class="token punctuation">;</span>
<span class="token keyword">assign</span> validout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>sel<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rst<span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out_reg <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        temp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">begin</span>
        temp <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span>
        out_reg <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out_reg <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out_reg <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>sel <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
        out_reg <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>

<span class="token keyword">end</span>

<span class="token comment">//*************code***********//</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-多功能数据处理器" tabindex="-1"><a class="header-anchor" href="#_1-6-多功能数据处理器" aria-hidden="true">#</a> 1.6 多功能数据处理器</h3><h4 id="描述-5" tabindex="-1"><a class="header-anchor" href="#描述-5" aria-hidden="true">#</a> 描述</h4><p>根据指示信号select的不同，对输入信号a,b实现不同的运算。输入信号a,b为8bit有符号数，当select信号为0，输出a；当select信号为1，输出b；当select信号为2，输出a+b；当select信号为3，输出a-b.<br> 接口信号图如下：</p><figure><img src="`+i+`" alt="多功能数据处理器" tabindex="0" loading="lazy"><figcaption>多功能数据处理器</figcaption></figure><h4 id="我的解答-5" tabindex="-1"><a class="header-anchor" href="#我的解答-5" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">data_select</span><span class="token punctuation">(</span>
	<span class="token keyword">input</span> clk<span class="token punctuation">,</span>
	<span class="token keyword">input</span> rst_n<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token keyword">signed</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>a<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token keyword">signed</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>b<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>select<span class="token punctuation">,</span>
	<span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token keyword">signed</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>c
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span>
	<span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>select<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> 
		c <span class="token operator">&lt;=</span> a<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>select<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>select<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>select<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-求两个数的差值" tabindex="-1"><a class="header-anchor" href="#_1-7-求两个数的差值" aria-hidden="true">#</a> 1.7 求两个数的差值</h3><h4 id="描述-6" tabindex="-1"><a class="header-anchor" href="#描述-6" aria-hidden="true">#</a> 描述</h4><p>根据输入信号a,b的大小关系，求解两个数的差值：输入信号a,b为8bit位宽的无符号数。如果a&gt;b，则输出a-b，如果a≤b，则输出b-a。</p><p>接口信号图如下：</p><figure><img src="`+k+`" alt="求两个数的差值" tabindex="0" loading="lazy"><figcaption>求两个数的差值</figcaption></figure><h4 id="我的解答-6" tabindex="-1"><a class="header-anchor" href="#我的解答-6" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">data_minus</span><span class="token punctuation">(</span>
	<span class="token keyword">input</span> clk<span class="token punctuation">,</span>
	<span class="token keyword">input</span> rst_n<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>a<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>b<span class="token punctuation">,</span>

	<span class="token keyword">output</span>  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>c
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span>
	<span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-使用generate-for语句简化代码" tabindex="-1"><a class="header-anchor" href="#_1-8-使用generate-for语句简化代码" aria-hidden="true">#</a> 1.8 使用generate…for语句简化代码</h3><h4 id="描述-7" tabindex="-1"><a class="header-anchor" href="#描述-7" aria-hidden="true">#</a> 描述</h4><p>在某个module中包含了很多相似的连续赋值语句，请使用generata…for语句编写代码，替代该语句，要求不能改变原module的功能。<br> 使用Verilog HDL实现以上功能并编写testbench验证。</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> <span class="token function">template_module</span><span class="token punctuation">(</span> 
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_in<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_out
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_out <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_in <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="我的解答-7" tabindex="-1"><a class="header-anchor" href="#我的解答-7" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">gen_for_module</span><span class="token punctuation">(</span> 
    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_in<span class="token punctuation">,</span>
    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_out
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">genvar</span> i<span class="token punctuation">;</span>

<span class="token keyword">generate</span>
    <span class="token function">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span><span class="token punctuation">:</span>gen
        <span class="token keyword">assign</span> data_out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data_in<span class="token punctuation">[</span><span class="token number">7</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">endgenerate</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-使用子模块实现三输入数的大小比较" tabindex="-1"><a class="header-anchor" href="#_1-9-使用子模块实现三输入数的大小比较" aria-hidden="true">#</a> 1.9 使用子模块实现三输入数的大小比较</h3><h4 id="描述-8" tabindex="-1"><a class="header-anchor" href="#描述-8" aria-hidden="true">#</a> 描述</h4><p>在数字芯片设计中，通常把完成特定功能且相对独立的代码编写成子模块，在需要的时候再在主模块中例化使用，以提高代码的可复用性和设计的层次性，方便后续的修改。</p><p>请编写一个子模块，将输入两个8bit位宽的变量data_a,data_b，并输出data_a,data_b之中较小的数。并在主模块中例化，实现输出三个8bit输入信号的最小值的功能。</p><p>子模块的信号接口图如下：</p><figure><img src="`+r+'" alt="使用子模块实现三输入数的大小比较-子模块" tabindex="0" loading="lazy"><figcaption>使用子模块实现三输入数的大小比较-子模块</figcaption></figure><p>主模块的信号接口图如下：</p><figure><img src="'+d+`" alt="使用子模块实现三输入数的大小比较-主模块" tabindex="0" loading="lazy"><figcaption>使用子模块实现三输入数的大小比较-主模块</figcaption></figure><h4 id="我的解答-8" tabindex="-1"><a class="header-anchor" href="#我的解答-8" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">main_mod</span><span class="token punctuation">(</span>
	<span class="token keyword">input</span> clk<span class="token punctuation">,</span>
	<span class="token keyword">input</span> rst_n<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>a<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>b<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>c<span class="token punctuation">,</span>
	
	<span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>
<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> c_temp<span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>
	c_temp <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span>
<span class="token keyword">end</span>


sub_mod <span class="token function">first</span><span class="token punctuation">(</span>
	<span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">rst_n</span><span class="token punctuation">(</span>rst_n<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

sub_mod <span class="token function">second</span><span class="token punctuation">(</span>
	<span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">rst_n</span><span class="token punctuation">(</span>rst_n<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>c_temp<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">endmodule</span>

<span class="token keyword">module</span> <span class="token function">sub_mod</span><span class="token punctuation">(</span>
	<span class="token keyword">input</span> clk<span class="token punctuation">,</span> 
	<span class="token keyword">input</span> rst_n<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span>

	<span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> c
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> c_wire<span class="token punctuation">;</span>

<span class="token keyword">assign</span> c_wire <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span>

<span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span>
	<span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span>
	<span class="token keyword">else</span> <span class="token keyword">begin</span>
		c <span class="token operator">&lt;=</span> c_wire<span class="token punctuation">;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-10-使用函数实现数据大小端转换" tabindex="-1"><a class="header-anchor" href="#_1-10-使用函数实现数据大小端转换" aria-hidden="true">#</a> 1.10 使用函数实现数据大小端转换</h3><h4 id="描述-9" tabindex="-1"><a class="header-anchor" href="#描述-9" aria-hidden="true">#</a> 描述</h4><p>在数字芯片设计中，经常把实现特定功能的模块编写成函数，在需要的时候再在主模块中调用，以提高代码的复用性和提高设计的层次，分别后续的修改。</p><p>请用函数实现一个4bit数据大小端转换的功能。实现对两个不同的输入分别转换并输出。</p><p>程序的接口信号图如下：</p><figure><img src="`+m+`" alt="使用函数实现数据大小端转换" tabindex="0" loading="lazy"><figcaption>使用函数实现数据大小端转换</figcaption></figure><h4 id="我的解答-9" tabindex="-1"><a class="header-anchor" href="#我的解答-9" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns
<span class="token keyword">module</span> <span class="token function">function_mod</span><span class="token punctuation">(</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>a<span class="token punctuation">,</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>b<span class="token punctuation">,</span>
	
	<span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>c<span class="token punctuation">,</span>
	<span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>d
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assign</span> c <span class="token operator">=</span> <span class="token function">resort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assign</span> d <span class="token operator">=</span> <span class="token function">resort</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> resort<span class="token punctuation">;</span>
	<span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> com<span class="token punctuation">;</span>
	resort <span class="token operator">=</span> <span class="token operator">{</span>com<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> com<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> com<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> com<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">endfunction</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-组合逻辑" tabindex="-1"><a class="header-anchor" href="#_2-组合逻辑" aria-hidden="true">#</a> 2. 组合逻辑</h2><h3 id="_2-1-4位数值比较器电路" tabindex="-1"><a class="header-anchor" href="#_2-1-4位数值比较器电路" aria-hidden="true">#</a> 2.1 4位数值比较器电路</h3><h4 id="描述-10" tabindex="-1"><a class="header-anchor" href="#描述-10" aria-hidden="true">#</a> 描述</h4><p>某4位数值比较器的功能表如下。</p><p>请用Verilog语言采用门级描述方式，实现此4位数值比较器</p><figure><img src="`+b+`" alt="4位数值比较器电路" tabindex="0" loading="lazy"><figcaption>4位数值比较器电路</figcaption></figure><h4 id="我的解答-10" tabindex="-1"><a class="header-anchor" href="#我的解答-10" aria-hidden="true">#</a> 我的解答</h4><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns

<span class="token keyword">module</span> <span class="token function">comparator_4</span><span class="token punctuation">(</span>
	<span class="token keyword">input</span>		<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>       A   	<span class="token punctuation">,</span>
	<span class="token keyword">input</span>	   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>		B   	<span class="token punctuation">,</span>
 
 	<span class="token keyword">output</span>	 <span class="token keyword">wire</span>		Y2    <span class="token punctuation">,</span> <span class="token comment">//A&gt;B</span>
	<span class="token keyword">output</span>   <span class="token keyword">wire</span>        Y1    <span class="token punctuation">,</span> <span class="token comment">//A=B</span>
    <span class="token keyword">output</span>   <span class="token keyword">wire</span>        Y0      <span class="token comment">//A&lt;B</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assign</span> Y1 <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assign</span> Y2 <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;~</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;~</span>B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">assign</span> Y0 <span class="token operator">=</span> B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;~</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token operator">~</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;~</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>持续更新</strong></p>`,84);function y(w,h){return s(),a("div",null,[p(" more "),t("之前做的一些牛客网的Verilog题目，都通过了。不是标准答案，但是能过就对了。稍微整理一下，也放上来。 "),g])}const x=n(v,[["render",y],["__file","牛客网verilog题目.html.vue"]]);export{x as default};
